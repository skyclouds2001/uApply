// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"uapply-micro/service/user/cmd/rpc/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty       = user.Empty
	GetSexReq   = user.GetSexReq
	GetSexRsp   = user.GetSexRsp
	GetUsersRsp = user.GetUsersRsp
	UserInfo    = user.UserInfo
	UserUid     = user.UserUid

	User interface {
		//  获取用户性别
		GetUserSex(ctx context.Context, in *GetSexReq, opts ...grpc.CallOption) (*GetSexRsp, error)
		//  获取用户信息
		GetUsers(ctx context.Context, in *GetSexReq, opts ...grpc.CallOption) (*GetUsersRsp, error)
		//  根据uid获取用户信息
		GetUserByUid(ctx context.Context, in *UserUid, opts ...grpc.CallOption) (*UserInfo, error)
		//  保存简历，该接口会做参数校验
		SaveResume(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 获取用户性别
func (m *defaultUser) GetUserSex(ctx context.Context, in *GetSexReq, opts ...grpc.CallOption) (*GetSexRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserSex(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultUser) GetUsers(ctx context.Context, in *GetSexReq, opts ...grpc.CallOption) (*GetUsersRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUsers(ctx, in, opts...)
}

// 根据uid获取用户信息
func (m *defaultUser) GetUserByUid(ctx context.Context, in *UserUid, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByUid(ctx, in, opts...)
}

// 保存简历，该接口会做参数校验
func (m *defaultUser) SaveResume(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SaveResume(ctx, in, opts...)
}
