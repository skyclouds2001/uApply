// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: inter.proto

package inter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterviewerClient is the client API for Interviewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterviewerClient interface {
	// 添加面试官接口
	AddInter(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*Empty, error)
	// 删除面试官
	DeleteInter(ctx context.Context, in *InterReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取所有面试官
	GetInters(ctx context.Context, in *IntersReq, opts ...grpc.CallOption) (*IntersResp, error)
	// 修改面试官
	UpdateInter(ctx context.Context, in *UpdateInterReq, opts ...grpc.CallOption) (*Empty, error)
}

type interviewerClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewerClient(cc grpc.ClientConnInterface) InterviewerClient {
	return &interviewerClient{cc}
}

func (c *interviewerClient) AddInter(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/inter.Interviewer/addInter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewerClient) DeleteInter(ctx context.Context, in *InterReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/inter.Interviewer/DeleteInter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewerClient) GetInters(ctx context.Context, in *IntersReq, opts ...grpc.CallOption) (*IntersResp, error) {
	out := new(IntersResp)
	err := c.cc.Invoke(ctx, "/inter.Interviewer/GetInters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewerClient) UpdateInter(ctx context.Context, in *UpdateInterReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/inter.Interviewer/UpdateInter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterviewerServer is the server API for Interviewer service.
// All implementations must embed UnimplementedInterviewerServer
// for forward compatibility
type InterviewerServer interface {
	// 添加面试官接口
	AddInter(context.Context, *AddReq) (*Empty, error)
	// 删除面试官
	DeleteInter(context.Context, *InterReq) (*Empty, error)
	// 获取所有面试官
	GetInters(context.Context, *IntersReq) (*IntersResp, error)
	// 修改面试官
	UpdateInter(context.Context, *UpdateInterReq) (*Empty, error)
	mustEmbedUnimplementedInterviewerServer()
}

// UnimplementedInterviewerServer must be embedded to have forward compatible implementations.
type UnimplementedInterviewerServer struct {
}

func (UnimplementedInterviewerServer) AddInter(context.Context, *AddReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInter not implemented")
}
func (UnimplementedInterviewerServer) DeleteInter(context.Context, *InterReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInter not implemented")
}
func (UnimplementedInterviewerServer) GetInters(context.Context, *IntersReq) (*IntersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInters not implemented")
}
func (UnimplementedInterviewerServer) UpdateInter(context.Context, *UpdateInterReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInter not implemented")
}
func (UnimplementedInterviewerServer) mustEmbedUnimplementedInterviewerServer() {}

// UnsafeInterviewerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterviewerServer will
// result in compilation errors.
type UnsafeInterviewerServer interface {
	mustEmbedUnimplementedInterviewerServer()
}

func RegisterInterviewerServer(s grpc.ServiceRegistrar, srv InterviewerServer) {
	s.RegisterService(&Interviewer_ServiceDesc, srv)
}

func _Interviewer_AddInter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewerServer).AddInter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inter.Interviewer/addInter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewerServer).AddInter(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interviewer_DeleteInter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewerServer).DeleteInter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inter.Interviewer/DeleteInter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewerServer).DeleteInter(ctx, req.(*InterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interviewer_GetInters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewerServer).GetInters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inter.Interviewer/GetInters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewerServer).GetInters(ctx, req.(*IntersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interviewer_UpdateInter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewerServer).UpdateInter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inter.Interviewer/UpdateInter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewerServer).UpdateInter(ctx, req.(*UpdateInterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Interviewer_ServiceDesc is the grpc.ServiceDesc for Interviewer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interviewer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inter.Interviewer",
	HandlerType: (*InterviewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addInter",
			Handler:    _Interviewer_AddInter_Handler,
		},
		{
			MethodName: "DeleteInter",
			Handler:    _Interviewer_DeleteInter_Handler,
		},
		{
			MethodName: "GetInters",
			Handler:    _Interviewer_GetInters_Handler,
		},
		{
			MethodName: "UpdateInter",
			Handler:    _Interviewer_UpdateInter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inter.proto",
}
