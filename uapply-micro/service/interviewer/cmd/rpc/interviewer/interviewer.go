// Code generated by goctl. DO NOT EDIT!
// Source: inter.proto

package interviewer

import (
	"context"

	"uapply-micro/service/interviewer/cmd/rpc/inter"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddReq         = inter.AddReq
	Empty          = inter.Empty
	InterInfo      = inter.InterInfo
	InterReq       = inter.InterReq
	IntersReq      = inter.IntersReq
	IntersResp     = inter.IntersResp
	UpdateInterReq = inter.UpdateInterReq

	Interviewer interface {
		//  添加面试官接口
		AddInter(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*Empty, error)
		//  删除面试官
		DeleteInter(ctx context.Context, in *InterReq, opts ...grpc.CallOption) (*Empty, error)
		//  获取所有面试官
		GetInters(ctx context.Context, in *IntersReq, opts ...grpc.CallOption) (*IntersResp, error)
		//  修改面试官
		UpdateInter(ctx context.Context, in *UpdateInterReq, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultInterviewer struct {
		cli zrpc.Client
	}
)

func NewInterviewer(cli zrpc.Client) Interviewer {
	return &defaultInterviewer{
		cli: cli,
	}
}

// 添加面试官接口
func (m *defaultInterviewer) AddInter(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*Empty, error) {
	client := inter.NewInterviewerClient(m.cli.Conn())
	return client.AddInter(ctx, in, opts...)
}

// 删除面试官
func (m *defaultInterviewer) DeleteInter(ctx context.Context, in *InterReq, opts ...grpc.CallOption) (*Empty, error) {
	client := inter.NewInterviewerClient(m.cli.Conn())
	return client.DeleteInter(ctx, in, opts...)
}

// 获取所有面试官
func (m *defaultInterviewer) GetInters(ctx context.Context, in *IntersReq, opts ...grpc.CallOption) (*IntersResp, error) {
	client := inter.NewInterviewerClient(m.cli.Conn())
	return client.GetInters(ctx, in, opts...)
}

// 修改面试官
func (m *defaultInterviewer) UpdateInter(ctx context.Context, in *UpdateInterReq, opts ...grpc.CallOption) (*Empty, error) {
	client := inter.NewInterviewerClient(m.cli.Conn())
	return client.UpdateInter(ctx, in, opts...)
}
