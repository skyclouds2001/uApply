// Code generated by goctl. DO NOT EDIT!
// Source: department.proto

package server

import (
	"context"

	"uapply-micro/service/department/cmd/rpc/department"
	"uapply-micro/service/department/cmd/rpc/internal/logic"
	"uapply-micro/service/department/cmd/rpc/internal/svc"
)

type DepartmentServer struct {
	svcCtx *svc.ServiceContext
}

func NewDepartmentServer(svcCtx *svc.ServiceContext) *DepartmentServer {
	return &DepartmentServer{
		svcCtx: svcCtx,
	}
}

func (s *DepartmentServer) CreateDep(ctx context.Context, in *department.CreReq) (*department.CreInfoRsp, error) {
	l := logic.NewCreateDepLogic(ctx, s.svcCtx)
	return l.CreateDep(in)
}

func (s *DepartmentServer) GetDep(ctx context.Context, in *department.DepReq) (*department.DepInfoRsp, error) {
	l := logic.NewGetDepLogic(ctx, s.svcCtx)
	return l.GetDep(in)
}

func (s *DepartmentServer) GetDeps(ctx context.Context, in *department.DepReq) (*department.DepsInfoRsp, error) {
	l := logic.NewGetDepsLogic(ctx, s.svcCtx)
	return l.GetDeps(in)
}

func (s *DepartmentServer) UpdDep(ctx context.Context, in *department.UdpReq) (*department.DepInfoRsp, error) {
	l := logic.NewUpdDepLogic(ctx, s.svcCtx)
	return l.UpdDep(in)
}

func (s *DepartmentServer) DelDep(ctx context.Context, in *department.DelReq) (*department.DepInfoRsp, error) {
	l := logic.NewDelDepLogic(ctx, s.svcCtx)
	return l.DelDep(in)
}

func (s *DepartmentServer) Register(ctx context.Context, in *department.RegReq) (*department.Empty, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *DepartmentServer) GetRegister(ctx context.Context, in *department.RegReq) (*department.GetRegRsp, error) {
	l := logic.NewGetRegisterLogic(ctx, s.svcCtx)
	return l.GetRegister(in)
}

func (s *DepartmentServer) GetRegByDepIds(ctx context.Context, in *department.RbdReq) (*department.RbdRsp, error) {
	l := logic.NewGetRegByDepIdsLogic(ctx, s.svcCtx)
	return l.GetRegByDepIds(in)
}

func (s *DepartmentServer) GetRegisterMsg(ctx context.Context, in *department.UserUid) (*department.RegInfo, error) {
	l := logic.NewGetRegisterMsgLogic(ctx, s.svcCtx)
	return l.GetRegisterMsg(in)
}

func (s *DepartmentServer) MarkUser(ctx context.Context, in *department.MarkInfo) (*department.Empty, error) {
	l := logic.NewMarkUserLogic(ctx, s.svcCtx)
	return l.MarkUser(in)
}
